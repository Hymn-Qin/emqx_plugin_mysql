%%-*- mode: erlang -*-
%% emqx_plugin_mysql config mapping
{mapping, "mysql.server", "emqx_plugin_mysql.server", [
  {default, {"127.0.0.1", 3306}},
  {datatype, [integer, ip, string]}
]}.

{mapping, "mysql.pool", "emqx_plugin_mysql.server", [
  {default, 8},
  {datatype, integer}
]}.

{mapping, "mysql.username", "emqx_plugin_mysql.server", [
  {default, ""},
  {datatype, string}
]}.

{mapping, "mysql.password", "emqx_plugin_mysql.server", [
  {default, ""},
  {datatype, string}
]}.

{mapping, "mysql.database", "emqx_plugin_mysql.server", [
  {default, "mqtt"},
  {datatype, string}
]}.

{mapping, "mysql.query_timeout", "emqx_plugin_mysql.server", [
  {default, ""},
  {datatype, string}
]}.

{translation, "emqx_plugin_mysql.server", fun(Conf) ->
  {MyHost, MyPort} =
  case cuttlefish:conf_get("mysql.server", Conf) of
    {Ip, Port} -> {Ip, Port};
    S          -> case string:tokens(S, ":") of
                    [Domain]       -> {Domain, 3306};
                    [Domain, Port] -> {Domain, list_to_integer(Port)}
                  end
    end,
  Pool = cuttlefish:conf_get("mysql.pool", Conf),
  Username = cuttlefish:conf_get("mysql.username", Conf),
  Passwd = cuttlefish:conf_get("mysql.password", Conf),
  DB = cuttlefish:conf_get("mysql.database", Conf),
  Timeout = case cuttlefish:conf_get("mysql.query_timeout", Conf, "") of
                "" -> infinity;
                Duration ->
                    case cuttlefish_duration:parse(Duration, ms) of
                      {error, Reason} -> error(Reason);
                      Ms when is_integer(Ms) -> Ms
                  end
            end,
  [{pool_size, Pool},
   {auto_reconnect, 1},
   {host, MyHost},
   {port, MyPort},
   {user, Username},
   {password, Passwd},
   {database, DB},
   {encoding, utf8},
   {query_timeout, Timeout},
   {keep_alive, true}]
end}.

